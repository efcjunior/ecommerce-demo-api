üß© CONTINUA√á√ÉO DO PROJETO - CLEAN ARCHITECTURE (JAVA SPRING BOOT)

Objetivo:
Reestruturar o projeto ecommerce-demo-api seguindo a Clean Architecture (Uncle Bob),
com foco em separa√ß√£o de camadas, modulariza√ß√£o Maven, entidades ricas, exce√ß√µes de dom√≠nio e testes de unidade via TDD.

------------------------------------------------------------
üèó ESTRUTURA DE M√ìDULOS
------------------------------------------------------------
ecommerce-entities            ‚Üí Enterprise Business Rules (Entities)
ecommerce-usecases            ‚Üí Application Business Rules (Use Cases)
ecommerce-interface-adapters  ‚Üí Interface Adapters (Controllers, Gateways)
ecommerce-frameworks-drivers  ‚Üí Frameworks & Drivers (DB, Kafka, Elasticsearch, Security)

Fluxo de depend√™ncia:
frameworks-drivers ‚Üí interface-adapters ‚Üí usecases ‚Üí entities

------------------------------------------------------------
‚öôÔ∏è STATUS ATUAL
------------------------------------------------------------
- Todos os pom.xml corrigidos e hierarquia Maven configurada.
- Reestrutura√ß√£o feita de dentro para fora (entities ‚Üí usecases ‚Üí adapters ‚Üí frameworks).
- Entities Product, Order, User e relat√≥rios refatoradas como entidades ricas.
- Casos de uso ajustados para usar m√©todos de dom√≠nio, sem recriar entidades.
- Exce√ß√µes gen√©ricas substitu√≠das por exce√ß√µes espec√≠ficas de dom√≠nio.
- Regras de valida√ß√£o e consist√™ncia encapsuladas dentro das entidades.
- Padr√£o de exce√ß√µes centralizado na classe base DomainException.
- Testes unit√°rios do dom√≠nio Product implementados via TDD com JUnit 5.

------------------------------------------------------------
üß± ENTIDADES REESTRUTURADAS
------------------------------------------------------------
Product
- M√©todos: create(), update(), decreaseStock(), increaseStock()
- Exce√ß√µes: ValidationException, InsufficientStockException
- Garantias: nome n√£o vazio, pre√ßo > 0, estoque ‚â• 0

Order
- M√©todos: create(), pay(), cancel(), addItem()
- Exce√ß√µes: EmptyOrderException, InvalidOrderStateException, InvalidOrderTotalException
- Regras: pedido sem itens √© inv√°lido, total n√£o pode ser negativo, estado deve ser coerente

OrderItem
- Record imut√°vel com valida√ß√£o interna
- Exce√ß√µes: InvalidQuantityException, InvalidPriceException
- Regra: quantidade > 0, pre√ßo > 0

User
- Usa enum UserRole (ADMIN / USER)
- M√©todos de dom√≠nio: register(), isAdmin(), isUser()
- Valida√ß√£o de formato de e-mail e papel do usu√°rio

Relat√≥rios
- UserAverageTicket ‚Üí Exce√ß√£o: InvalidAverageTicketException
- UserPurchaseSummary ‚Üí Exce√ß√£o: InvalidTotalSpentException
- Ambos definidos como records imut√°veis e validados

------------------------------------------------------------
üß™ TESTES DE DOM√çNIO ‚Äî PRODUCT (TDD)
------------------------------------------------------------
Classe: ProductTest
Framework: JUnit 5
Pacote: demo.ecommerce.entities.product

Casos cobertos:
1. shouldCreateProductWhenValidData
2. shouldThrowExceptionWhenNameIsBlank
3. shouldThrowExceptionWhenPriceIsZeroOrNegative
4. shouldThrowExceptionWhenStockIsNegative
5. shouldUpdateProductWhenValidData
6. shouldThrowExceptionWhenUpdatingWithInvalidData
7. shouldDecreaseStockWhenQuantityValid
8. shouldThrowExceptionWhenDecreaseStockBelowZero
9. shouldThrowExceptionWhenDecreaseStockWithZeroOrNegativeQuantity
10. shouldIncreaseStockWhenQuantityValid
11. shouldThrowExceptionWhenIncreaseStockWithZeroOrNegativeQuantity
12. shouldTrimNameOnCreateAndUpdate
13. shouldPreserveIdAndCreatedAtAfterUpdate

Resultado: cobertura completa das regras de neg√≥cio do dom√≠nio Product.

------------------------------------------------------------
üí• EXCE√á√ïES DE DOM√çNIO
------------------------------------------------------------
DomainException (base) ‚Üí raiz para todas as exce√ß√µes do dom√≠nio
ValidationException / InvalidFieldException ‚Üí valida√ß√µes gen√©ricas
InsufficientStockException ‚Üí estoque insuficiente
InvalidOrderStateException ‚Üí transi√ß√£o de estado inv√°lida
EmptyOrderException ‚Üí pedido sem itens
InvalidOrderTotalException ‚Üí total negativo ou nulo
InvalidQuantityException ‚Üí quantidade ‚â§ 0
InvalidPriceException ‚Üí pre√ßo ‚â§ 0
InvalidAverageTicketException ‚Üí ticket m√©dio inv√°lido
InvalidTotalSpentException ‚Üí total gasto inv√°lido

------------------------------------------------------------
üéØ PR√ìXIMOS PASSOS SUGERIDOS
------------------------------------------------------------
1. Replicar abordagem TDD nas entidades Order, OrderItem e User.
2. Integrar camada de persist√™ncia (MySQL) e indexa√ß√£o (Elasticsearch).
3. Validar consist√™ncia de eventos Kafka ap√≥s pagamento de pedidos.
4. Garantir cobertura de testes m√≠nima de 80% no m√≥dulo ecommerce-entities.

------------------------------------------------------------
üìÑ DOCUMENTOS DE REFER√äNCIA
------------------------------------------------------------
- Caso t√©cnico.pdf
- Fluxo de intera√ß√£o.pdf

------------------------------------------------------------
üìå COMO CONTINUAR
------------------------------------------------------------
Cole este prompt em um novo chat e diga:
"Continuar a partir deste contexto de reestrutura√ß√£o da Clean Architecture com exce√ß√µes de dom√≠nio e testes TDD do Product."
