🧩 CONTINUAÇÃO DO PROJETO - CLEAN ARCHITECTURE (JAVA SPRING BOOT)

Objetivo:
Reestruturar o projeto ecommerce-demo-api seguindo a Clean Architecture (Uncle Bob),
com foco em separação de camadas, modularização Maven, entidades ricas, exceções de domínio e testes de unidade via TDD.

------------------------------------------------------------
🏗 ESTRUTURA DE MÓDULOS
------------------------------------------------------------
ecommerce-entities            → Enterprise Business Rules (Entities)
ecommerce-usecases            → Application Business Rules (Use Cases)
ecommerce-interface-adapters  → Interface Adapters (Controllers, Gateways)
ecommerce-frameworks-drivers  → Frameworks & Drivers (DB, Kafka, Elasticsearch, Security)

Fluxo de dependência:
frameworks-drivers → interface-adapters → usecases → entities

------------------------------------------------------------
⚙️ STATUS ATUAL
------------------------------------------------------------
- Todos os pom.xml corrigidos e hierarquia Maven configurada.
- Reestruturação feita de dentro para fora (entities → usecases → adapters → frameworks).
- Entities Product, Order, User e relatórios refatoradas como entidades ricas.
- Casos de uso ajustados para usar métodos de domínio, sem recriar entidades.
- Exceções genéricas substituídas por exceções específicas de domínio.
- Regras de validação e consistência encapsuladas dentro das entidades.
- Padrão de exceções centralizado na classe base DomainException.
- Testes unitários dos domínios Product, Order, User, UserAverageTicket e UserPurchaseSummary implementados via TDD com JUnit 5.

------------------------------------------------------------
🧱 ENTIDADES REESTRUTURADAS
------------------------------------------------------------
Product
- Métodos: create(), update(), decreaseStock(), increaseStock()
- Exceções: ValidationException, InsufficientStockException
- Garantias: nome não vazio, preço > 0, estoque ≥ 0

Order
- Métodos: create(), pay(), cancel(), addItem()
- Exceções: EmptyOrderException, InvalidOrderStateException, InvalidOrderTotalException
- Regras: pedido sem itens é inválido, total não pode ser negativo, estado deve ser coerente

OrderItem
- Record imutável com validação interna
- Exceções: InvalidQuantityException, InvalidPriceException
- Regra: quantidade > 0, preço > 0

User
- Usa enum UserRole (ADMIN / USER)
- Métodos de domínio: register(), isAdmin(), isUser()
- Validação de formato de e-mail e papel do usuário

Relatórios
- UserAverageTicket → Exceção: InvalidAverageTicketException
- UserPurchaseSummary → Exceção: InvalidTotalSpentException
- Ambos definidos como records imutáveis e validados

------------------------------------------------------------
🧪 TESTES DE DOMÍNIO — PRODUCT (TDD)
------------------------------------------------------------
Classe: ProductTest
Framework: JUnit 5
Pacote: demo.ecommerce.entities.product

Casos cobertos:
1. shouldCreateProductWhenValidData
2. shouldThrowExceptionWhenNameIsBlank
3. shouldThrowExceptionWhenPriceIsZeroOrNegative
4. shouldThrowExceptionWhenStockIsNegative
5. shouldUpdateProductWhenValidData
6. shouldThrowExceptionWhenUpdatingWithInvalidData
7. shouldDecreaseStockWhenQuantityValid
8. shouldThrowExceptionWhenDecreaseStockBelowZero
9. shouldThrowExceptionWhenDecreaseStockWithZeroOrNegativeQuantity
10. shouldIncreaseStockWhenQuantityValid
11. shouldThrowExceptionWhenIncreaseStockWithZeroOrNegativeQuantity
12. shouldTrimNameOnCreateAndUpdate
13. shouldPreserveIdAndCreatedAtAfterUpdate

Resultado: cobertura completa das regras de negócio do domínio Product.

------------------------------------------------------------
🧪 TESTES DE DOMÍNIO — ORDER (TDD)
------------------------------------------------------------
Classe: OrderTest
Framework: JUnit 5
Pacote: demo.ecommerce.entities.order

Casos cobertos:
1. shouldCreateOrderWithValidItems
2. shouldThrowExceptionWhenCreatingWithEmptyItems
3. shouldCreateOrderWithCanceledStatusWhenAnyItemOutOfStock
4. shouldPayOrderWhenStatusIsPending
5. shouldThrowExceptionWhenPayingNonPendingOrder
6. shouldCancelOrderWhenPending
7. shouldThrowExceptionWhenCancelingPaidOrder
8. shouldAddItemWhenOrderIsPending
9. shouldThrowExceptionWhenAddingItemToNonPendingOrder
10. shouldRecalculateTotalWhenItemsAdded
11. shouldThrowExceptionWhenItemPriceIsNegative
12. shouldThrowExceptionWhenTotalAmountIsNegative
13. shouldPreserveIdUserIdAndCreatedAt

Resultado: cobertura completa das regras de negócio e transições de estado do domínio Order.

------------------------------------------------------------
🧪 TESTES DE DOMÍNIO — USER (TDD)
------------------------------------------------------------
Classe: UserTest
Pacote: demo.ecommerce.entities.user

Casos cobertos:
1. shouldRegisterUserWithValidData
2. shouldSetIdAndCreatedAtOnRegister
3. shouldThrowExceptionWhenEmailHasInvalidFormat
4. shouldThrowExceptionWhenNameIsNull
5. shouldThrowExceptionWhenEmailIsNull
6. shouldThrowExceptionWhenPasswordHashIsNull
7. shouldThrowExceptionWhenRoleIsNull
8. shouldReturnTrueForIsAdminWhenRoleAdmin
9. shouldReturnTrueForIsUserWhenRoleUser
10. shouldReturnFalseForIsAdminWhenRoleUser
11. shouldReturnFalseForIsUserWhenRoleAdmin
12. shouldGenerateDifferentIdsForDifferentRegistrations
13. shouldBeImmutable

Resultado: cobertura completa das regras de negócio e validações do domínio User.

------------------------------------------------------------
🧪 TESTES DE DOMÍNIO — USER AVERAGE TICKET (TDD)
------------------------------------------------------------
Classe: UserAverageTicketTest
Pacote: demo.ecommerce.entities.user

Casos cobertos:
1. shouldCreateWhenAverageTicketIsPositive
2. shouldCreateWhenAverageTicketIsZero
3. shouldAcceptPositiveValuesWithDifferentScales
4. shouldThrowExceptionWhenAverageTicketIsNull
5. shouldThrowExceptionWhenAverageTicketIsNegative

Resultado: validação completa das regras de negócio do record UserAverageTicket.

------------------------------------------------------------
🧪 TESTES DE DOMÍNIO — USER PURCHASE SUMMARY (TDD)
------------------------------------------------------------
Classe: UserPurchaseSummaryTest
Pacote: demo.ecommerce.entities.user

Casos cobertos:
1. shouldCreateWhenTotalSpentIsPositive
2. shouldCreateWhenTotalSpentIsZero
3. shouldAcceptPositiveValuesWithDifferentScales
4. shouldThrowExceptionWhenTotalSpentIsNull
5. shouldThrowExceptionWhenTotalSpentIsNegative

Resultado: validação completa das regras de negócio do record UserPurchaseSummary.

------------------------------------------------------------
💥 EXCEÇÕES DE DOMÍNIO
------------------------------------------------------------
DomainException (base) → raiz para todas as exceções do domínio
ValidationException / InvalidFieldException → validações genéricas
InsufficientStockException → estoque insuficiente
InvalidOrderStateException → transição de estado inválida
EmptyOrderException → pedido sem itens
InvalidOrderTotalException → total negativo ou nulo
InvalidQuantityException → quantidade ≤ 0
InvalidPriceException → preço ≤ 0
InvalidAverageTicketException → ticket médio inválido
InvalidTotalSpentException → total gasto inválido

------------------------------------------------------------
📄 DOCUMENTOS DE REFERÊNCIA
------------------------------------------------------------
- Caso técnico.pdf
- Fluxo de interação.pdf

------------------------------------------------------------
📌 COMO CONTINUAR
------------------------------------------------------------
Cole este prompt em um novo chat e diga:
"Continuar a partir deste contexto de reestruturação da Clean Architecture com exceções de domínio e testes TDD dos domínios Product e Order."




ecommerce-usecases
└── src/main/java/demo/ecommerce/usecases
    ├── common
    │   ├── UseCase.java                 // interface genérica UseCase<I,O>
    │   ├── Command.java / Query.java    // marcadores opcionais p/ CQRS
    │   ├── VoidUseCase.java             // útil para casos sem retorno
    │   └── exceptions
    │       └── NotFoundException.java   // exceção de aplicação (não-domínio)
    ├── ports
    │   ├── ProductRepository.java       // portas (interfaces) de saída
    │   ├── ClockProvider.java
    │   ├── IdGenerator.java
    │   └── EventPublisher.java          // opcional (domínio→aplicação)
    └── product
        ├── command
        │   ├── CreateProduct
        │   │   ├── CreateProductInput.java
        │   │   ├── CreateProductOutput.java
        │   │   └── CreateProductInteractor.java
        │   ├── UpdateProduct
        │   │   ├── UpdateProductInput.java
        │   │   ├── UpdateProductOutput.java
        │   │   └── UpdateProductInteractor.java
        │   ├── DeleteProduct
        │   │   ├── DeleteProductInput.java
        │   │   └── DeleteProductInteractor.java
        │   └── AdjustProductStock
        │       ├── AdjustProductStockInput.java   // {productId, delta}
        │       └── AdjustProductStockInteractor.java
        └── query
            ├── GetProductById
            │   ├── GetProductByIdInput.java
            │   ├── GetProductByIdOutput.java
            │   └── GetProductByIdInteractor.java
            └── SearchProducts
                ├── SearchProductsInput.java
                ├── SearchProductsOutput.java
                └── SearchProductsInteractor.java